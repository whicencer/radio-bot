const { REMOVE_CHAT, DELETE_CURRENT_MESSAGE, CHAT_SOURCES } = require('../../../constants/callbackQueries');
const { Chat: ChatModel } = require('../../../database/models');

async function getCurrentChat(bot, chatId, chatName) {
	try {
		const chat = await ChatModel.findOne({ where: { name: chatName } });
		
		const changeStatusButton = chat.status === 'off'
			? { text: 'üî• –ó–∞–ø—É—Å—Ç–∏—Ç—å', callback_data: `test` }
			: { text: 'üö´ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å', callback_data: `test` };

		bot.sendMessage(chatId, `<b>–ß–∞—Ç: <code>${chatName}</code></b>\n<b>–°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç: ${chat.chatLink}</b>`, {
			reply_markup: {
				inline_keyboard: [
					[changeStatusButton],
					[{ text: 'üé• –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —ç—Ñ–∏—Ä–∞', callback_data: `${CHAT_SOURCES}-${chatName}` }],
					[{ text: '‚ùå –£–¥–∞–ª–∏—Ç—å —á–∞—Ç', callback_data: `${REMOVE_CHAT}-${chatName}` }],
					[{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: DELETE_CURRENT_MESSAGE }]
				]
			},
			parse_mode: 'HTML'
		});
	} catch (error) {
		console.error("Error while processing GET_CURRENT_CHAT:", error);
		bot.sendMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
	}
};

module.exports = { getCurrentChat };