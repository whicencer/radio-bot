const { Scenes } = require('telegraf');
const { ADD_CHAT_LIBRARY_SOURCE_SCENE, CHAT_LIBRARY_SCENE } = require('../../constants/scenes');
const { deleteLastMessage } = require('../../utils/deleteLastMessage');
const { Resource, Chat } = require('../../database/models');
const { deleteMessageWithDelay } = require('../../utils/deleteMessageWithDelay');

const addChatLibrarySource = new Scenes.BaseScene(ADD_CHAT_LIBRARY_SOURCE_SCENE);

addChatLibrarySource.enter(async (ctx) => {
	const userId = ctx.from.id;
	const resources = await Resource.findAll({ where: {userId} });
	const resourceButtons = resources.map(resource => ([{text: `üéß ${resource.name}`, callback_data: `add_source ${resource.id}`}]));

	ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—É—Ä—Å, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å', {
		reply_markup: {
			inline_keyboard: [
				...resourceButtons,
				[{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back' }]
			]
		}
	});
});

addChatLibrarySource.action('back', ctx => {
	const chatId = ctx.scene.state.chatId;

	deleteLastMessage(ctx);
	ctx.scene.enter(CHAT_LIBRARY_SCENE, { chatId });
});

addChatLibrarySource.on('callback_query', async (ctx) => {
	const callbackData = ctx.callbackQuery.data;
	const chatId = ctx.scene.state.chatId;

	if (callbackData.startsWith('add_source')) {
		const resourceId = callbackData.replace('add_source', '');
		
		try {
			const chat = await Chat.findOne({where: {id: chatId}});
			const currentResource = await Resource.findOne({where: {id: resourceId}});
			chat.addResource(currentResource);

			
			const msg = await ctx.reply('‚úÖ –†–µ—Å—É—Ä—Å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª!');
			deleteMessageWithDelay(ctx, msg.message_id, 3000);
		} catch (error) {
			console.log(error);
			ctx.reply('‚ùå –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞');
		} finally {
			deleteLastMessage(ctx);
			ctx.scene.enter(CHAT_LIBRARY_SCENE, { chatId });
		}
	}
});

module.exports = { addChatLibrarySource };