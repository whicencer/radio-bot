const { Scenes } = require('telegraf');
const { ALL_CHATS_SCENE, CREATE_CHAT_SCENE } = require('../../constants/scenes');
const { deleteLastMessage } = require('../../utils/deleteLastMessage');
const { rtmpKeyValidate } = require('../../utils/validators/rtmpKeyValidate');
const { Chat } = require('../../database/models');
const { deleteMessageWithDelay } = require('../../utils/deleteMessageWithDelay');

const createChat = new Scenes.BaseScene(CREATE_CHAT_SCENE);
const exampleMsg = `–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞, –µ–≥–æ —Å—Å—ã–ª–∫—É, –∏ –∫–ª—é—á —Å–µ—Ä–≤–µ—Ä–∞ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏\n
–ü—Ä–∏–º–µ—Ä:
<code>Rock Radio</code>
<code>1694371569:_TcfFzvleD-sHZIQYVr25h</code>
<code>https://t.me/arat34t</code>
`;

createChat.enter(ctx => {
	ctx.reply(exampleMsg, {
		reply_markup: {
			inline_keyboard: [
				[{ text: 'üö´ –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'cancel' }]
			]
		},
		parse_mode: 'HTML'
	});
});

createChat.action('cancel', ctx => {
	ctx.scene.state = {};
	ctx.scene.enter(ALL_CHATS_SCENE);
	deleteLastMessage(ctx);
});

createChat.on('message', async (ctx) => {
	const userId = ctx.from.id;
	const chatInfo = ctx.message.text.split('\n');
	const [chatName, streamKey, chatLink] = chatInfo;
	
	if (chatInfo.length < 3) {
		ctx.reply('–¢—ã —á—ë –ø—Ä–∏–¥—É—Ä–æ–∫? –í –ø—Ä–∏–º–µ—Ä–µ –∂–µ –Ω–∞–ø–∏—Å–∞–Ω–æ –∫–∞–∫ –Ω–∞–¥–æ');
	} else if (!rtmpKeyValidate(streamKey)) {
		ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏');
	} else {
		try {
			await Chat.create({ userId, name: chatName, streamKey, chatLink});
	
			const msg = await ctx.reply('‚úÖ –ß–∞—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!');
			deleteMessageWithDelay(ctx, msg.message_id, 3000);
		} catch (error) {
			ctx.reply(`‚ùå –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —á–∞—Ç–∞: ${error.message}`);
		} finally {
			ctx.scene.enter(ALL_CHATS_SCENE);
		}
	}
});

module.exports = { createChat };