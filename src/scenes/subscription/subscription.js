const { Scenes } = require('telegraf');
const { SUBSCRIPTION_SCENE, USER_PROFILE_SCENE } = require('../../constants/scenes');
const { BASIC, ADVANCED, PREMIUM } = require('../../constants/subscriptions');
const { deleteLastMessage } = require('../../utils/deleteLastMessage');
const { handleSubcription } = require('./handleSubcription');
const { getLanguage } = require('../../utils/getLanguage');

const subscription = new Scenes.BaseScene(SUBSCRIPTION_SCENE);

subscription.enter(ctx => {
	ctx.reply(`
	<b>${getLanguage(ctx.session.lang, "–ü–æ–¥–ø–∏—Å–∫–∞")}</b> ‚Äî ${getLanguage(ctx.session.lang, "–æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è–º.")}.
\n<b>*</b>${getLanguage(ctx.session.lang, "–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏ –º–æ–∂–Ω–æ –≤–æ –≤–∫–ª–∞–¥–∫–µ üìñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")}`, {
		reply_markup: {
			inline_keyboard: [
				[{ text: `Basic ‚Äî $10/${getLanguage(ctx.session.lang, "–º–µ—Å")}.`, callback_data: BASIC.id }],
				[{ text: `Advanced ‚Äî $40/${getLanguage(ctx.session.lang, "–º–µ—Å")}.`, callback_data: ADVANCED.id }],
				[{ text: `Premium ‚Äî $70/${getLanguage(ctx.session.lang, "–º–µ—Å")}.`, callback_data: PREMIUM.id }],
				[{ text: getLanguage(ctx.session.lang, "üë§ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª—å"), callback_data: 'back' }],
			]
		},
		parse_mode: 'HTML'
	});
});

subscription.action('back', ctx => {
	deleteLastMessage(ctx);
	ctx.scene.enter(USER_PROFILE_SCENE);
});

subscription.action(BASIC.id, async (ctx) => {
	await handleSubcription(ctx, BASIC.id, BASIC.price);
});

subscription.action(ADVANCED.id, async (ctx) => {
	await handleSubcription(ctx, ADVANCED.id, ADVANCED.price);
});

subscription.action(PREMIUM.id, async (ctx) => {
	await handleSubcription(ctx, PREMIUM.id, PREMIUM.price);
});

module.exports = { subscription };