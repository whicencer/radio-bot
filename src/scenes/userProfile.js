const { Scenes } = require('telegraf');
const { USER_PROFILE_SCENE } = require('../constants/scenes');
const { User } = require('../database/models');
const { capitalizeFirstLetter } = require('../utils/capitalizeFirstLetter');

const userProfile = new Scenes.BaseScene(USER_PROFILE_SCENE);

userProfile.enter(async (ctx) => {
	const userId = ctx.message.from.id;

	try {
		const user = await User.findOne({ where: { id: userId } });

		const message = `
		üìå –í–∞—à id: ${userId}
üí∞ –ë–∞–ª–∞–Ω—Å: ${user.balance}$
üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${user.referrals.length}\n
üì± –¢–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ: ${capitalizeFirstLetter(user.tariff)}
		`;

		await ctx.reply(message, {
			reply_markup: {
				inline_keyboard: [
					[{ text: '–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data: 'test' }],
					[{ text: '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞', callback_data: 'myRef' }]
				]
			}
		});
	} catch (error) {
		console.log('Error:', error);
	}
});

userProfile.action('myRef', ctx => {
	const userId = ctx.from.id;

	ctx.reply(`‚úâÔ∏è –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –Ω–æ–≤—ã—Ö –ª—é–¥–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ 50% —Å –∏—Ö –¥–µ–ø–æ–∑–∏—Ç–∞\n
–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: <code>https://t.me/shop_test_hjvfs2_bot?start=${userId}</code>`, {
		parse_mode: 'HTML'
	});
});

module.exports = { userProfile };