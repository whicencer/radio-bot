const { Scenes } = require('telegraf');
const { USER_PROFILE_SCENE, ADMIN_PANEL_SCENE, SUBSCRIPTION_SCENE, BALANCE_SCENE } = require('../constants/scenes');
const { User } = require('../database/models');
const { capitalizeFirstLetter } = require('../utils/capitalizeFirstLetter');
const { userRoles } = require('../constants/userRoles');
const { deleteLastMessage } = require('../utils/deleteLastMessage');
const { formatDateDifference } = require('../utils/formatDateDifference');

const userProfile = new Scenes.BaseScene(USER_PROFILE_SCENE);

userProfile.enter(async (ctx) => {
	const userId = ctx.from.id;
	const { role } = await User.findByPk(userId);
	const isUserAdmin = role === 'admin' || role === 'moderator';
	
	try {
		const user = await User.findOne({ where: { id: userId } });
		const currentTariff = user.tariff === 'none'
			? '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
			: `${capitalizeFirstLetter(user.tariff)} (–∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ ${formatDateDifference(user.subExpiresAt)})`;

		const message = `
		üìå –í–∞—à id: <code>${userId}</code> (–í—ã <b>${userRoles[role]}</b>)
üí∞ –ë–∞–ª–∞–Ω—Å: ${Number(user.balance).toLocaleString('en-US')}$
üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${user.referrals.length}\n
üì± –¢–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ: ${currentTariff}
		`;

		await ctx.reply(message, {
			reply_markup: {
				inline_keyboard: [
					[{ text: 'üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data: 'balance' }],
					[{ text: 'üí≥ –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É', callback_data: 'sub' }],
					[{ text: 'üîÑ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞', callback_data: 'myRef' }],
					isUserAdmin ? [{ text: 'üõ†Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', callback_data: 'admin_panel' }] : []
				]
			},
			parse_mode: 'HTML'
		});
	} catch (error) {
		console.log('Error:', error);
	}
});

userProfile.action('sub', ctx => {
	deleteLastMessage(ctx);
	ctx.scene.enter(SUBSCRIPTION_SCENE);
});

userProfile.action('balance', ctx => {
	deleteLastMessage(ctx);
	ctx.scene.enter(BALANCE_SCENE);
});

userProfile.action('admin_panel', async (ctx) => {
	const tgUserId = ctx.from.id;

	const { role } = await User.findByPk(tgUserId);
	const userHasPermission = role === 'admin' || role === 'moderator';

	if (userHasPermission) {
		deleteLastMessage(ctx);
		ctx.scene.enter(ADMIN_PANEL_SCENE);
	} else {
		ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –≤–∫–ª–∞–¥–∫–µ!');
	}
});

userProfile.action('myRef', ctx => {
	const userId = ctx.from.id;

	ctx.reply(`‚úâÔ∏è –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –Ω–æ–≤—ã—Ö –ª—é–¥–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ 50% —Å –∏—Ö –¥–µ–ø–æ–∑–∏—Ç–∞\n
–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: <code>https://t.me/shop_test_hjvfs2_bot?start=${userId}</code>`, {
		parse_mode: 'HTML'
	});
});

module.exports = { userProfile };