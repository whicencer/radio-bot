const { Scenes } = require('telegraf');
const { ADD_LIBRARY_SOURCE_SCENE, LIBRARY_SCENE, ADD_SOURCE_TO_CHAT_SCENE, ADD_TWITCH_SCENE } = require('../../constants/scenes');
const { deleteLastMessage } = require('../../utils/deleteLastMessage');
const { twitchUrlValidate } = require('../../utils/validators/twitchUrlValidate');
const { Resource } = require('../../database/models');
const { deleteMessageWithDelay } = require('../../utils/deleteMessageWithDelay');

const addTwitch = new Scenes.BaseScene(ADD_TWITCH_SCENE);
const msg = `–ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å—Ç—Ä—ñ–º Twitch (–£ —Ç–æ—á–Ω–æ —Ç–∞–∫–æ–º—É –∂ —Ñ–æ—Ä–º–∞—Ç—ñ, —è–∫ –≤–∫–∞–∑–∞–Ω–æ –≤ –ø—Ä–∏–∫–ª–∞–¥—ñ)\n
–ü—Ä–∏–∫–ª–∞–¥: https://www.twitch.tv/jesusavgn`;

addTwitch.enter(ctx => {
	ctx.reply(msg, {
		link_preview_options: {
			is_disabled: true
		},
		reply_markup: {
			inline_keyboard: [
				[{ text: 'üö´ –°–∫–∞—Å—É–≤–∞—Ç–∏', callback_data: 'cancel' }]
			]
		}
	});
});

addTwitch.action('cancel', ctx => {
	deleteLastMessage(ctx);
	ctx.scene.enter(ADD_LIBRARY_SOURCE_SCENE);
});

addTwitch.on('message', async (ctx) => {
	const url = ctx.message.text;
	const userId = ctx.from.id;
	const streamerName = url.replace('https://www.twitch.tv/', '');

	if (!twitchUrlValidate(url)) {
		ctx.reply('–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—Å–∏–ª–∞–Ω–Ω—è');
	} else {
		try {
			const createdSource = await Resource.create({ userId, name: `${streamerName} (Twitch)`, url });
	
			const msg = await ctx.reply('‚úÖ –†–µ—Å—É—Ä—Å –±—É–≤ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–∏–π!');

			ctx.scene.enter(ADD_SOURCE_TO_CHAT_SCENE, { createdSource });
			deleteMessageWithDelay(ctx, msg.message_id, 3000);
		} catch (err) {
			ctx.reply('‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ —Ä–µ—Å—É—Ä—Å—É: –ú–æ–∂–ª–∏–≤–æ –≤–∏ –≤–≤–µ–ª–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–µ –≤—ñ—Ä–Ω–æ');
			ctx.scene.enter(LIBRARY_SCENE);
		}
	}
});

module.exports = { addTwitch };