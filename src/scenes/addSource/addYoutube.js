const { Scenes } = require('telegraf');
const { ADD_YOUTUBE_SCENE, ADD_SOURCE_SCENE, LIBRARY_SCENE } = require('../../constants/scenes');
const { deleteLastMessage } = require('../../utils/deleteLastMessage');
const { youtubeUrlValidate } = require('../../utils/validators/youtubeUrlValidate');
const { Resource } = require('../../database/models');
const { getSourceTitle } = require('../../utils/youtube');
const { deleteMessageWithDelay } = require('../../utils/deleteMessageWithDelay');

const addYoutube = new Scenes.BaseScene(ADD_YOUTUBE_SCENE);
const msg = `–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –Ω–∞ YouTube\n
–ü—Ä–∏–º–µ—Ä: https://www.youtube.com/watch?v=dQw4w9WgXcQ`;

addYoutube.enter(ctx => {
	ctx.reply(msg, {
		link_preview_options: {
			is_disabled: true
		},
		reply_markup: {
			inline_keyboard: [
				[{ text: 'üö´ –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'cancel' }]
			]
		}
	});
});

addYoutube.action('cancel', ctx => {
	deleteLastMessage(ctx);
	ctx.scene.enter(ADD_SOURCE_SCENE);
});

addYoutube.on('message', async (ctx) => {
	const url = ctx.message.text;
	const userId = ctx.from.id;

	if (!youtubeUrlValidate(url)) {
		ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏');
	} else {
		try {
			const sourceTitle = await getSourceTitle(url);
			await Resource.create({ userId, name: sourceTitle, url });
	
			const msg = await ctx.reply('‚úÖ –†–µ—Å—É—Ä—Å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!');

			deleteMessageWithDelay(ctx, msg.message_id, 3000);
		} catch (err) {
			ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ—Å—É—Ä—Å–∞: –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –≤–≤–µ–ª–∏ —Å—Å—ã–ª–∫—É –Ω–µ –≤–µ—Ä–Ω–æ');
		} finally {
			ctx.scene.enter(LIBRARY_SCENE);
		}
	}
});

module.exports = { addYoutube };