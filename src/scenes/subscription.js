const { Scenes } = require('telegraf');
const { SUBSCRIPTION_SCENE } = require('../constants/scenes');
const { BASIC, ADVANCED, PREMIUM } = require('../constants/subscriptions');
const { User } = require('../database/models');

const subscription = new Scenes.BaseScene(SUBSCRIPTION_SCENE);

subscription.enter(ctx => {
	ctx.reply('–î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É!\n\n<b>*–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏ –º–æ–∂–Ω–æ –≤–æ –≤–∫–ª–∞–¥–∫–µ üìñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>', {
		reply_markup: {
			inline_keyboard: [
				[{ text: 'Basic ‚Äî $10/–º–µ—Å.', callback_data: BASIC.id }],
				[{ text: 'Advanced ‚Äî $40/–º–µ—Å.', callback_data: ADVANCED.id }],
				[{ text: 'Premium ‚Äî $70/–º–µ—Å.', callback_data: PREMIUM.id }],
			]
		},
		parse_mode: 'HTML'
	});
});

subscription.action(BASIC.id, async (ctx) => {
	const userId = ctx.from.id;
	const user = await User.findByPk(userId);

	if (user.balance < BASIC.price) {
		ctx.reply('–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ');
	} else {
		console.log('–ü–æ–¥–ø–∏—Å–∫–∞');
		user.decrement('balance', { by: 10, where: { id: userId } });
	}
});

module.exports = { subscription };