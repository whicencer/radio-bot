const { Scenes } = require('telegraf');
const { ADMIN_SET_USER_SUBSCRIPTION, ADMIN_MANAGE_USERS_SCENE } = require('../../constants/scenes');
const { deleteLastMessage } = require('../../utils/deleteLastMessage');
const { User } = require('../../database/models');
const { BASIC, ADVANCED, PREMIUM, NONE } = require('../../constants/subscriptions');
const { daysToMilliseconds } = require('../../utils/daysToMilliseconds');

const setSubscription = new Scenes.BaseScene(ADMIN_SET_USER_SUBSCRIPTION);

setSubscription.enter(ctx => {
	ctx.reply('–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∞—Ä–∏—Ñ, —è–∫–∏–π —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞—Ç–∏', {
		reply_markup: {
			inline_keyboard: [
				[{ text: 'Basic', callback_data: BASIC.id }],
				[{ text: 'Advanced', callback_data: ADVANCED.id }],
				[{ text: 'Premium', callback_data: PREMIUM.id }],
				[{ text: '–ó–∞–±—Ä–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É', callback_data: NONE }],
				[{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back' }]
			]
		}
	});
});

setSubscription.action('back', ctx => {
	deleteLastMessage(ctx);
	ctx.scene.enter(ADMIN_MANAGE_USERS_SCENE);
});

setSubscription.action('cancel', ctx => {
	deleteLastMessage(ctx);
	ctx.scene.enter(ADMIN_MANAGE_USERS_SCENE);
});

setSubscription.on('callback_query', ctx => {
	const callbackData = ctx.callbackQuery.data;

	if (callbackData !== 'back') {
		ctx.scene.session.stage = 2;
		ctx.scene.session.tariff = callbackData;

		ctx.reply('–í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–º—É —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É', {
			reply_markup: {
				inline_keyboard: [
					[{ text: 'üö´ –°–∫–∞—Å—É–≤–∞—Ç–∏', callback_data: 'cancel' }]
				]
			}
		});
	}
});

setSubscription.on('message', async (ctx) => {
	const msgText = ctx.message.text;

	if (ctx.scene.session.stage === 2) {
		ctx.scene.session.userId = msgText;

		try {
			const user = await User.findByPk(msgText);
			const tariff = ctx.scene.session.tariff;

			if (tariff === 'none') {
				await user.update({ tariff });
				ctx.reply(`–í–∏ –∑–∞–±—Ä–∞–ª–∏ –ø—ñ–¥–ø–∏—Å–∫—É —É ID ${ctx.scene.session.userId}.`);
				ctx.scene.enter(ADMIN_MANAGE_USERS_SCENE);
			} else {
				if (!user) {
					ctx.reply(`–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID ${msgText} –Ω–µ –±—É–ª–æ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö –±–æ—Ç–∞.`);
				} else {
					ctx.reply('–í–≤–µ–¥—ñ—Ç—å —Å—Ç—Ä–æ–∫, –Ω–∞ —è–∫–∏–π –≤–∏ —Ö–æ—á–µ—Ç–µ –Ω–∞–¥–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É (—É –¥–Ω—è—Ö)', {
						reply_markup: {
							inline_keyboard: [
								[{ text: 'üö´ –°–∫–∞—Å—É–≤–∞—Ç–∏', callback_data: 'cancel' }]
							]
						}
					});
					ctx.scene.session.stage = 3;
				}
			}
		} catch (error) {
			ctx.reply(`–ü—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –∑–∞–ø–∏—Ç—É –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞.`);
			console.log('Error while setting subscription: ', error);
		}
	} else if (ctx.scene.session.stage === 3) {
		const tariff = ctx.scene.session.tariff;
		const days = ctx.message.text;
		const userId = ctx.scene.session.userId;

		if (!isNaN(Number(days))) {
			try {
				await User.update({ tariff, subExpiresAt: new Date(Date.now() + daysToMilliseconds(days)) }, { where: { id: userId } });
				ctx.reply(`–¢–∞—Ä–∏—Ñ ${tariff} –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–Ω–æ –Ω–∞ ${days} –¥–Ω—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –∑ ID ${userId}.`);
				ctx.scene.enter(ADMIN_MANAGE_USERS_SCENE);
			} catch (error) {
				ctx.reply('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—ñ —Ç–∞—Ä–∏—Ñ—É.');
				console.log('Error while setting subscription: ', error);
			}
		}
	}
});

module.exports = { setSubscription };