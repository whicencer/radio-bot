const { Scenes } = require('telegraf');
const { ADMIN_PANEL_SCENE, ADD_ADMIN_SCENE } = require('../../constants/scenes');
const { deleteLastMessage } = require('../../utils/deleteLastMessage');
const { User } = require('../../database/models');

const adminPanel = new Scenes.BaseScene(ADMIN_PANEL_SCENE);

adminPanel.enter(ctx => {
	const userName = ctx.from.first_name;

	ctx.reply(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –±–æ—Ç–∞, <b>${userName}</b>!`, {
		reply_markup: {
			inline_keyboard: [
				[{ text: 'üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤', callback_data: 'admin_list' }],
				[{ text: 'üîß –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞', callback_data: 'add_admin' }],
				[{ text: '‚öôÔ∏è –î–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞', callback_data: 'test' }],
				[{ text: 'üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏', callback_data: 'test' }],
			]
		},
		parse_mode: 'HTML'
	});
});

adminPanel.action('admin_list', async (ctx) => {
	const currentUserId = ctx.from.id;
	const allAdmins = await User.findAll({ where: { role: 'admin' } });
	const admins = allAdmins.map(admin => {
		return admin.id == currentUserId
			? `@${admin.username} (${admin.id}) (–í—ã)`
			: `@${admin.username} (${admin.id})`;
	});

	ctx.reply(`–í—Å–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –±–æ—Ç–∞:\n${admins.join('\n')}\n
–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/delete_admin {id_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è}</code>`, {
		reply_markup: {
			inline_keyboard: [
				[{ text: '‚¨áÔ∏è –°–∫—Ä—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', callback_data: 'hide' }]
			]
		},
		parse_mode: 'HTML'
	});
});

adminPanel.action('hide', ctx => {
	deleteLastMessage(ctx);
});

adminPanel.action('add_admin', ctx => {
	deleteLastMessage(ctx);
	ctx.scene.enter(ADD_ADMIN_SCENE);
});

module.exports = { adminPanel };